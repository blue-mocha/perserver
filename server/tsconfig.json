{ //타입스크립트(설정) -> . js 

    "compilerOptions": {
      
      //타입체킹(유형확인)==================================================//
      //->개발과정(컴파일 이후의 안정성도 생각해야함.)

      // allowUnreachableCode, - 컴파일러가 도달 할 수 없는 코드를 만났을 때 어떻게 반응할 것인지에 대한 설정
      // allowUnusedLabels, - 코드 내에서 사용되지 않는 라벨을 만났을 때 

      "strict": true, //모든 strict 관련 설정이 켜짐. (모든 옵션을 켜는 - 업데이트 시에 자동추가될 수 있음)
      "alwaysStrict": true, //자바스크립트 "use strict" 모드 켜기
      // "strictNullChecks": true // null, undefined 타입에 이상한 조작하면 에러를 띄우는 설정
      // "strictFunctionTypes": true, //함수파라미터 타입체크 강하게 
                                      //(파라미터 : 반공변성<함수의 파라미터는 적당히 공유될 수 없음>으로 강하게 체크해주기.)
      //  strictBindCallApply, - 내장 함수인 bind / call / apply 를 사용할 때, 엄격하게 체크 
                                 //함수의 내부 컨덱스트 변형하는 내장함수(다른객체의 속성을 끌어다 쓰는)
      //  strictPropertyInitialization - class 프로퍼티 타입이 선언된 상태로 초기화 시키지 않았을 때 오류가 발생
      //  useUnknownInCatchVariables -catch 문의 인자로 주어지는 erro(e) 값을 어떤 타입으로 평가할것인가.(e - 타입정의 필수)

      //(임시값 노노!)
      "noFallthroughCasesInSwitch": true, //break 없이 지나가는것 체크하기. 
      // "noImplicitThis": true, //this 키워드가 any 타입일 경우 에러내기 - globalThis를 쓰는 경우가 별로 없다함.
      // "noImplicitAny": true, //  any라는 타입이 의도치않게 발생할 경우 에러를 띄워주는 설정
      // "noUnusedLocals": true, //쓰지않는 지역변수 있으면 에러내기
      // "noUnusedParameters": true, //쓰지않는 파라미터 있으면 에러내기
      // "noImplicitReturns": true, //함수에서 return 빼먹으면 에러내기 

      //(인터페이스)
      // noPropertyAccessFromIndexSignature, - 정의되지 않은 필드(인터페이스 속성)-> [name] 인덱스 시그내쳐로 접근해야함. vs user.name (. 문법)
      // noUncheckedIndexedAccess, - 인덱스 시그니처로 선언한 프로퍼티를 어떻게 추론할 것인지에 대한 옵션
      // exactOptionalPropertyTypes, - 프리픽스(?)로 표현되는 타입이나 /인터페이스 내부의 옵셔널 프로퍼티를 얼마나 엄격하게 처리할 지를 결정.
      // -> userId? : string | number | (undefined) : 기본이나, 필수기재. 

      //(클래스)
      // noImplicitOverride, - 클래스를 상속받은 서브 클래스가 슈퍼 클래스의 멤버 변수나 메소드를 암묵적으로 오버라이딩하는 것을 허용.

      //모듈(컴파일 참고과정)============================================================// 
      //import 구문을 기준으로.

      //baseUrl": "src", --> <<절대경로 지정>> 
      /* "paths": {  + baseUrl이 설정되어야 쓸 수 있음. (특정, 모듈탐색 위치 정해주기)
            "app/*": ["app/*"],  
            "config/*": ["app/_config/*"],
            "lib/*": ["lib/*"],
            "tests/*": ["tests/*"]
      },*/       

      //allowUmdGlobalAccess, //UMD(Universal Module Definition)형태의 모듈에 접근.
      //전역객체에<네임스페이스에 담아서> 모듈을 포함시키는 방법. 
      // <-> (default : false / import를 통해서 가져오세요! : 더 안전한 방법임.)  

      "resolveJsonModule": true,//확장자가 .json인 모듈의 import를 허용하는 설정
      "moduleResolution": "node", //모듈이 정확히 무엇을 참조하는지 확인하는 절차 (절대경로 사용 등으로- >정확한 디렉토리와 ts인지 d.ts인지 알수 없음)
      // 기본적으로 : 상대경로- 파일 안에서만 찾음, 절대경로 - 모듈위치 -> 상위 디렉토리로 거슬러 올라감.
      // class(기본, 하위호환되는) : 올라가면서 ts/ d.ts를 동시에 대입. 
      // node : + tsx, package.json -> index.ts(tsx, d.ts)가 추가되서 -> 더 다양한 방법시도.

      //noResolve  - (default : false) include, files에 포함되지 않아도 import로 불러오면 모두 컴파일 대상이 됨.
      //-> (: true) 지정한 것만 참조. 
      //moduleSuffixes, - 모듈 해결자 탐색 방법을 사용자가 정의할 수 있음.    

      "module": "commonJS", // 브라우저에서 구현할 모듈시스템(아직까지 es 모듈을 지원하지 않은 곳이 많지않음)

      //*@types 패키지 디렉토리 밑에 있는 모든 파일들을 자동으로 컴파일 대상으로 포함하고, 
      //이 과정에서 타입 선언을 전역 스코프에 뿌려버린다. (자동으로 가져다 쓸 수 있는)

      //types  :  특정한 패키지들의 타입만 전역 스코프에 포함 ex)  "types": ["node", "jest", "express"]
      "typeRoots": [  //d.ts 따로 설정 
      "./@types",
      "./node_modules/@types", // 기본값 
      "./src/customTypes" //커스텀 
      ],     

      //"rootDir": "./", //출력되는 구조(/dist 폴더에 담길) // (default) : 알아서 엔트리 포인트를 잡음. index.ts
      //rootDirs, -> 가상디렉토리 만들기 / 출력 후에 영향 주지 않음.
      //   "rootDirs": ["core", "utils"] -> 포함하는 모듈끼리는 같은 디렉토리에 있는 것처럼 사용가능. 

      //방출(=결과물)===================================================================//

      //[컴파일된 js파일 ] - [타입에 관한 파일(출력선택)] - 둘을 이어주는 파일(출력선택) : 소스맵 (맵핑정보를 가짐)

      //"declaration": true, //컴파일시 .d.ts 파일도 자동으로 함께생성 (현재쓰는 모든 타입이 정의된 파일)
      //declarationDir - .d.ts 파일이 생성되는 디렉토리 설정
      //declarationMap - 해당하는 '.d.ts'파일 '각각'에 대한 소스 맵을 생성합니다.

      // "inlineSourceMap": true, // 별도의 파일 대신 소스 맵으로 단일 파일을 내보냄. 
      // "inlineSources": true,   // 단일 파일 안에 소스와 소스맵을 함께 내보내도록 설정. '--inlineSourceMap' 또는 '--sourceMap' 설정이 필요 */
      // "mapRoot": "./",         // 디버거가 생성된 위치 대신 맵 파일을 찾을 위치 설정 */
      // sourceMap   - 소스맵(*.map) 파일 생성 여부
      //"sourceRoot": "./",       // 디버거(debugger)가 소스 위치 대신 TypeScript 파일을 찾을 위치 설정 */

      //emitBOM 출력 파일의 시작 부분에 UTF-8 바이트 순서표 (BOM) 추가여부
      //emitDeclarationOnly - '.d.ts' 선언 파일만 내보냅니다.
      
      //importHelpers - tslib에서 helpers (e.g. __extends, __rest, etc..)를 가져온다.
      //importsNotUsedAsValues - 
      //downlevelIteration - target이 ES3 및 ES5 일때도 /(es6 이터레이션 기능)for..of, spread, destructuring문법 지원

      //"noEmit": true - 최종결과물 아닌, ts를 체크용(테스트)로 사용. 
      // noEmitHelpers - 커스텀 헬퍼 함수(e.g. __extends, __rest, etc..)를 결과파일에 포함시키지 않음
      // noEmitOnError - 에러 발생시 결과를 출력하지 않음. 

      //preserveConstEnums - const enum형 선언을 지우지 않을건지 여부 (메모리 절약) / 필요한 코드만. 
      //preserveValueImports
      // newLine - 기본적으로 플랫폼에 따라 "crlf" (windows) or "lf" (unix) 가 설정됨
      //"removeComments": true, //컴파일시 주석제거 
       
       "outDir": "dist", //출력할 디덱토리
      // "outFile": "./", //단일파일로 출력시 파일명 : 모든 ts파일을 js파일 하나로 컴파일해줌 (module이 none, amd, system일 때만 가능)

    
      //자바스크립트 지원===============================================================//
        "allowJs": true, // js 파일들을 import해서 쓸 수 있는지.
        //"checkJs": true, // 일반 js 파일에서도 에러체크 여부 (오류 리포트)
       
      //에디터 지원 
         //disableSizeLimit - Disable size limitation on JavaScript project.
         // plugins - 편집환경을 더 좋게 변경하기 위한 플러그인 기능
       

      //상위운용제약 ===========================================================================//
        "allowSyntheticDefaultImports": true , //with esModuleInterop.
        "esModuleInterop": true, //es모듈 상호운용 (const/import : 트랜스파일링됨.)
        "forceConsistentCasingInFileNames": true,//(권장)사용할 파일의 이름을 대소문자까지 정확하게 작성하도록 
      //"isolatedModules": true, //소스코드 파일을 모듈로 만들기를 강제

      //하위호환성 
        // "charset": "utf8", // 입력파일의 문자집합 형식
        //keyofStringsOnly, - keyof를 문자열 값으로 된 프로퍼티 이름에만 적용(숫자나 심벌에서는 안됨).
        //noImplicitUseStrict, - 모듈 출력에 "use strict" 지시자를 내보내지 않습니다.
        //noStrictGenericChecks, - 함수에서 generic의 엄격한 검사 해제 여부
        //suppressExcessPropertyErrors  객체 리터럴에 대한 초과 속성 검사 억제 여부
        //uppressImplicitAnyIndexErrors 인덱스 서명이없는 개체를 인덱싱하는 경우 --noImplicitAny 오류 억제여부

      //언어 및 환경 
        "target": "ES6",   // 최종 컴파일 버전 // ex) (type-graphql) : 라이브러리랑 연동주의
        "experimentalDecorators": true, //데코레이터를 위한 유형 메타데이터 방출 실험 기능 지원 설정
        //"lib": ["es2021"], //컴파일 할 때 포함될 라이브러리의 목록 : +)) 기능추가 
        // "jsx": "preserve", // tsx 파일을 jsx로 어떻게 컴파일할 것인지 => 'preserve', 'react-native', 'react'
      
      //컴파일러 Diagnostics =========================================//
        //diagnostics -진단 정보를 보여줍니다.
        //explainFiles
        //extendedDiagnostics - 자세한 진단 정보를 표시.
        //generateCpuProfile  -주어진 경로에 cpu 프로필을 생성 ->  파일 경로 대신 존재하는 디렉터리 이름을 전달.
        //listEmittedFiles - 컴파일의 일부로 생성된 파일의 이름을 출력.
        //listFiles - 컴파일의 일부로 생성된 파일의 이름을 출력.
        //traceResolution - 모듈 해석 로그 메세지를 보고.

      //프로젝트 
        //composite,
        //disableReferencedProjectLoad,
        //disableSolutionSearching,
        //disableSourceOfProjectReferenceRedirect,
        //incremental 
        //tsBuildInfoFile - 증분 빌드 정보를 저장할 파일을 지정합니다.

      //출력포멧 
        //noErrorTruncation - 오류 메세지를 줄이지 않습니다.(잘라냄)
        //preserveWatchOutput  - 스크린을 지우는 대신에 예전 콘솔 출력을 감시 모드로 남겨둠.
        //pretty - 에러와 메시지를 색과 컨텍스트를 사용해서 스타일 지정.

      //완전성 
       //"skipLibCheck": true, //(생략권장) library 등 .d.ts 파일의 타입 검사를 생략.      

      // 실험적인 기능 옵션(데코레이터)
       "emitDecoratorMetadata": true, // ES7 데코레이터(decorators) 실험 기능 지원 설정  ex) type-graphql
      
      //워치옵션 ===========================================================================//
        //watchFile,
        //watchDirectory,
        //fallbackPolling,
        //synchronousWatchDirectory,
        //excludeDirectories andexcludeFiles

      //타입취득 "typeAcquisition"
        //enable,
        //include,
        //exclude anddisableFilenameBasedTypeAcquisition   
    },

    //[top level]
      // files,
      // extends,
      "include": ["src/**/*.ts", "src/graphql/user/typeDef.ts", "src/config/passport.js", "src/customTypes/index.d.ts"],
      "exclude": ["node_modules",  "build",  "**/*.(spec|test).ts"],
}
    //모듈시스템=========================================//
        /*CommonJS (target 프로퍼티가 ES3 혹은 ES5로 지정되었을 때의 기본값)
        ES6/ES2015 (target 프로퍼티가 ES6 혹은 그 이상의 버전으로 지정되었을 때의 기본값)
        나머지 (ES2020, ESNext, AMD, UMD, System, None)*/

    //tsconfig 참고사이트 : https://evan-moon.github.io/2021/08/08/tsconfig-compiler-options-type-check/